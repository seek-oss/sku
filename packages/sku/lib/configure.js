#!/usr/bin/env node
const { writeFile, rm } = require('fs/promises');
const path = require('path');
const glob = require('fast-glob');
const fs = require('fs');

const ensureGitignore = require('ensure-gitignore');
const { cwd, getPathFromCwd } = require('./cwd');

const { paths, httpsDevServer, languages } = require('../context');
const {
  bundleReportFolder,
} = require('../config/webpack/plugins/bundleAnalyzer');
const printBanner = require('../lib/banner');
const chalk = require('chalk');
const prettierConfig = require('../config/prettier/prettierConfig');
const eslintConfig = require('../config/eslint/eslintConfig');
const createTSConfig = require('../config/typescript/tsconfig.js');
const getCertificate = require('./certificate');
const coverageFolder = 'coverage';

const convertToForwardSlashPaths = (pathStr) => pathStr.replace(/\\/g, '/');
const addSep = (p) => `${p}${path.sep}`;
const prependBanner = (str) =>
  `/** THIS FILE IS GENERATED BY SKU, MANUAL CHANGES WILL BE DISCARDED **/\n${str}`;

const writeFileToCWD = async (fileName, content, { banner = true } = {}) => {
  const outPath = getPathFromCwd(fileName);
  const str = JSON.stringify(content, null, 2);
  const contentStr = banner ? prependBanner(str) : str;

  await writeFile(outPath, contentStr);
};

module.exports = async () => {
  // Ignore webpack bundle report output
  const gitIgnorePatterns = [
    addSep(bundleReportFolder),
    addSep(coverageFolder),
  ];
  const lintIgnorePatterns = [
    addSep(bundleReportFolder),
    addSep(coverageFolder),
    '*.less.d.ts',
  ];

  // Ignore webpack target directories
  const targetDirectory = addSep(paths.target.replace(addSep(cwd()), ''));
  const storybookTargetDirectory = addSep(
    paths.storybookTarget.replace(addSep(cwd()), ''),
  );

  gitIgnorePatterns.push(targetDirectory, storybookTargetDirectory);
  lintIgnorePatterns.push(targetDirectory, storybookTargetDirectory);

  // Generate ESLint configuration
  const eslintConfigFilename = '.eslintrc';
  await writeFileToCWD(eslintConfigFilename, eslintConfig);
  gitIgnorePatterns.push(eslintConfigFilename);

  // Generate Prettier configuration
  // NOTE: We are not generating a banner as prettier does not support the `JSON
  // with comments` format in `.prettierrc`. We are opting for this filename as it
  // takes the highest precendence of the available config names and we want to
  // ensure it is not accidentally overridden by a non-controlled config file.
  const prettierConfigFilename = '.prettierrc';
  await writeFileToCWD(prettierConfigFilename, prettierConfig, {
    banner: false,
  });
  gitIgnorePatterns.push(prettierConfigFilename);

  if (languages) {
    const generatedVocabFileGlob = '**/*.vocab/index.ts';
    gitIgnorePatterns.push(generatedVocabFileGlob);
    lintIgnorePatterns.push(generatedVocabFileGlob);
  }

  // Write `.eslintignore`
  const eslintignorePath = getPathFromCwd('.eslintignore');
  await ensureGitignore({
    filepath: eslintignorePath,
    comment: 'managed by sku',
    patterns: lintIgnorePatterns.map(convertToForwardSlashPaths),
  });

  // Write `.prettierignore`
  await ensureGitignore({
    filepath: getPathFromCwd('.prettierignore'),
    comment: 'managed by sku',
    patterns: lintIgnorePatterns.map(convertToForwardSlashPaths),
  });

  // Generate TypeScript configuration
  const tsConfigFileName = 'tsconfig.json';
  await writeFileToCWD(tsConfigFileName, createTSConfig());
  gitIgnorePatterns.push(tsConfigFileName);

  // Generate self-signed certificate and ignore
  const selfSignedCertificateDirName = '.ssl';
  if (httpsDevServer) {
    await getCertificate(selfSignedCertificateDirName);
    gitIgnorePatterns.push(selfSignedCertificateDirName);
  } else {
    await rm(getPathFromCwd(selfSignedCertificateDirName), {
      recursive: true,
      force: true,
    });
  }

  // Write `.gitignore`
  await ensureGitignore({
    filepath: getPathFromCwd('.gitignore'),
    comment: 'managed by sku',
    patterns: gitIgnorePatterns.map(convertToForwardSlashPaths),
  });

  // Check for `.less` files
  const lessFileGlobResults = await Promise.all(
    paths.src
      .filter((srcPath) => fs.statSync(srcPath).isDirectory())
      .map(async (srcPath) => await glob(path.join(srcPath, '**/*.less'))),
  );
  const srcHasLessFiles = lessFileGlobResults.some((fileArray) => {
    return fileArray.length > 0;
  });
  if (srcHasLessFiles) {
    printBanner('warning', 'Less styles detected', [
      `Vanilla Extract is the preferred styling solution supported by sku. Support for ${chalk.bold(
        '.less',
      )} styles may be removed in the future. Please migrate all ${chalk.bold(
        '.less',
      )} styles to Vanilla Extract styles.`,
      'https://seek-oss.github.io/sku/#/./docs/styling?id=vanilla-extract',
    ]);
  }
};
